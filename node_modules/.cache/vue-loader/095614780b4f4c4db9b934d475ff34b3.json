{"remainingRequest":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/src/views/Tema4.vue?vue&type=template&id=3cfd85a3&lang=pug","dependencies":[{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/src/views/Tema4.vue","mtime":1732553305011},{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF4_228117_ANALITICA_DE_DATOS/CF4_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}